export declare type Atom<T> = {
    get: GetAtomFn<T>;
    set: SetAtomFn<T>;
    subscribe: SubscribeAtomFn<T>;
    UNSAFE_directSet: DirectSetAtomFn<T>;
    UNSAFE_notify: NotifyFn;
    UNSAFE_storage: WeakMap<StorageKey, any>;
};
export declare type StorageKey = {
    key: string;
};
export declare type ValueOrFn<T> = T | ((oldValue: T) => T) | ((oldValue: T) => Promise<T>);
export declare type GetAtomInInitialFn<R> = (get: <V>(atom: Atom<V>) => V) => R;
export declare type InitialValueOrFn<T> = T | GetAtomInInitialFn<T> | GetAtomInInitialFn<Promise<T>>;
export declare type SetAtomOptions = {
    noSuspense?: boolean;
    equal?: (a: any, b: any) => boolean;
    fromInit?: boolean;
};
export declare type GetAtomFn<T> = () => T;
export declare type SetAtomFn<T> = (newValue: ValueOrFn<T>, options?: SetAtomOptions) => void;
export declare type Subscriber<T> = (newValue: T) => void;
export declare type SubscribeAtomFn<T> = (subscriber: Subscriber<T>) => void;
export declare type DirectSetAtomFn<T> = (newValue: T) => void;
export declare type NotifyFn = () => void;
export declare type Hooks<T, AtomValue extends Atom<T> = Atom<T>> = {
    beforeValueSet?: (atom: AtomValue, atomValue: T, firstSet: boolean) => T;
    afterValueSet?: (atom: AtomValue, atomValue: T, firstSet: boolean) => void;
    onCreate?: (atom: AtomValue) => AtomValue;
    onGet?: (atom: AtomValue) => T;
};
export declare type Dispatcher<T> = {
    [key: string]: ((...param: any) => T) | ((...param: any) => Promise<T>);
};
export declare enum PromiseStatus {
    PENDING = 0,
    SUCCESS = 1,
    ERROR = 2
}
export declare type SuspenseResult<T> = {
    read: () => T;
};
