import{isFunction as I,isSuspense as p,suspensePromise as S}from"../utils";function y(T){const F=[];let t,a=!0,n;const o=this,c=()=>{F.forEach(e=>e(t))},A=()=>o?.onGet?o.onGet(n):p(t)?t.read():t,l=(e,i)=>{const m=!i?.noSuspense,b=i?.equal||Object.is,f=(s,r)=>{b(t,s)||(t=o?.beforeValueSet?.(n,s,a)||s,o?.afterValueSet?.(n,t,a),a=!1,r&&c())};if(I(e)){let s;if(i?.fromInit){const r=e;try{s=r(u=>(u.subscribe(()=>l(e,i)),u.get()))}catch(u){t=S(u,()=>null);return}}else s=e(t);s instanceof Promise?t=S(s,r=>{f(r,!0)}):f(s,!m)}else f(e,!m);m&&c()};return n={get:A,set:l,subscribe:e=>F.push(e),UNSAFE_directSet:e=>{t=e},UNSAFE_notify:c,UNSAFE_storage:new WeakMap},l(T,{fromInit:!0}),o?.onCreate?.(n)||n}var R=y;export{y as atom,R as default};
